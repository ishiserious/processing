//this is audio generative so you need a sound playing in your computer mic

//this is audio generative so you need a sound playing in your computer mic

import processing.sound.*;

ArrayList<Rectangle> rectangles = new ArrayList<Rectangle>();
Rectangle c;

FFT fft;
AudioIn in;
int bands = 256;
float[] spectrum = new float[bands];
float fft_a;

Amplitude amp;
float ampt;

float x;

void setup() {
  frameRate(200);
  size(2400, 400, P3D);
  
  fft = new FFT(this, bands);
  amp = new Amplitude(this);
  in = new AudioIn(this, 0);
  in.start();
  fft.input(in);
  amp.input(in);
}

void draw() {
  background(0);
  stroke(255);
  fill(0);
  strokeWeight(1);
  ampt = amp.analyze();
  fft.analyze(spectrum);
  x = random(0, bands);
  float height1 = float(height);
  float width1 = float(width);
  
  for (int i = 0; i < rectangles.size(); ++i) {//starts at 1 because ++i instead of i++
    rectangles.get(i).display();
    //rectangles.get(i).checkEdges();
  }
  for (float t = 0; t < bands; t++) {
    rect(width1/2, 0, -(ampt*10000), height1);
    //rect(width1/2, 0, (ampt*10000), height1);
    //rect(width1/2, 0, width1, (ampt*5000));
    //rect(0, height1, width1/2, -(ampt*1667));
    //rect(width1/2, height1/2, (ampt*1667), -(ampt*1667));
    //rect(width1/2, height1/2, -(ampt*1667), (ampt*1667));
    //rect(width1/2, height1/2, -(ampt*1667), -(ampt*900));
    //rect(width1/2, height1/2, (ampt*1667), (ampt*1667));
    
    //translate(width1/2, height1/2, 0);
    //sphere(ampt*20000);

  }
  if (ampt >.009) {
     c = new Rectangle();
     rectangles.add(c);
  }
 if (rectangles.size() > 150) {
   rectangles.remove(1); 
  }
}
float y(float x) {
   return sin(x)*10 + cos(spectrum[int(x)]);
 }

class Rectangle{
  PVector location,velocity,acceleration; //creating 3 objects
  float G,mass,size;

Rectangle(){
    float limits_y = width/2 - ampt*10000;  
    float limits_x = height/2 - ampt*1667;
    for(int i = 0; i < bands; i++){
    location = new PVector(random(0,limits_y), random(1,limits_x)); //creating the point
    mass = 50;//random(ampt,ampt*50);
    size = mass;
    if (rectangles != null && location.x+70 > limits_y) {
     //int to_remove = rectangles.get(i)
     rectangles.remove(i); 
    }
    //catch (Exception e) {
    //  System.out.println("Something went wrong.");
    //}
    if (rectangles != null && location.y+70 > limits_x) {
     //int to_remove = rectangles.get(i)
     rectangles.remove(i); 
    }
    }
    //for(int i = 0; i < bands; i++){
    //location = new PVector(random(limits,2400), random(1,400)); //creating the point
    //mass = ampt*500;//random(ampt,ampt*50);
    //size = mass;
    //if (location.x > -limits
    //}
  }

void display(){
    stroke(255);
    rect(location.x, location.y,size,size);
  }

void checkEdges(){
    if (location.x < size/2) {
      location.x = size/2;
      velocity.x *= -1;
    } else if (location.x > width/*-size/2*/){
      location.x = width/*-size/2*/;
      velocity.x *= ampt;
    }
    for(int i = 0; i < bands; i++){  
    if (location.y < size/2) {
      location.y = size/2;
      velocity.y *= spectrum[int(random(1,256))];
    } else if (location.y > height/*-size/2*/){
      location.y = height;//-size/2;
      velocity.y *= -ampt;
    }
  }
  }
}
