import processing.sound.*;

ArrayList<Rectangle> rectangles = new ArrayList<Rectangle>();
Rectangle r;

int largo = 20;
float q = 0;


FFT fft;
AudioIn in;
int bands = 256;
float[] spectrum = new float[bands];
float fft_a;

Amplitude amp;
float ampt;

float x;

int times = minute()*60+second();

void setup() {
  frameRate(60);
  size(2400, 400, P3D);
  smooth();
  background(0);
  stroke(255);
  fft = new FFT(this, bands);
  amp = new Amplitude(this);
  in = new AudioIn(this, 0);
  in.start();
  fft.input(in);
  amp.input(in);
}

void draw() {
  smooth(0);
  background(0);
  stroke(255);
  fill(0);
  strokeWeight(1);
  ampt = amp.analyze();
  fft.analyze(spectrum);
  x = random(0, bands);
  float height1 = float(height);
  float width1 = float(width);
    //for (float t = 0; t < bands; t++) {
    rect(width1/2, 0, -(ampt*10000), height1);
    if (second()+minute()*60 - times> 100) {
      fill(0,0,0,0);
     rect(width1/2, 0, (ampt*10000), height1);
       } 
    smooth(0);
    if (ampt > .1) {
        background(70); 
    } else {
      fill(5000*ampt);
    } 
    if (ampt > .009 && second()+minute()*60 - times > 10 && second()+minute()*60 - times < 100) {
    //rect(width1/2, 0, (ampt*10000), height1);
    //rect(width1/2, 0, width1, (ampt*5000));
    //rect(0, height1, width1/2, -(ampt*1667));
    rect(width1/2, height1/2, -(ampt*1667), -(ampt*900));
    rect(width1/2, height1/2, (ampt*1667), -(ampt*1667));
    rect(width1/2, height1/2, -(ampt*1667), (ampt*1667));
    rect(width1/2, height1/2, (ampt*1667), (ampt*1667));
  }
  if (ampt > .009 && second()+minute()*60 - times > 1 && second()+minute()*60 - times < 100) {
    for (float t = 0; t < 186; t += 1) {
     //if (second()+minute()*60 == t) {
     r = new Rectangle();
     rectangles.add(r);
     //}
    }
  }

    if (ampt > .015 && second()+minute()*60 - times > 30 && second()+minute()*60 - times < 100) {
     rect(width1/4, 0, (ampt*50000), height1);
    rect(width1/4, 0, width1/2, (ampt*5000));
    rect(0, height1, width1/2, -(ampt*1667));
      rect(width1/4, height1/2, -(ampt*1667), -(ampt*1667));
      rect(width1/4, height1/2, (ampt*1667), -(ampt*1667));
      rect(width1/4, height1/2, -(ampt*1667), (ampt*1667));
      rect(width1/4, height1/2, (ampt*1667), (ampt*900));
     for (int x = 0; x < width; x+=20) 
        {
          for (int y = 0; y < height; y+=20)
          {
            stroke(q);
            strokeWeight(0);
            fill(q,q,q,30);
            rect(x,y,largo-1,largo-1);
            q = random((ampt*255)/.1);
        }
        }
    }
  if (ampt > .04 && second()+minute()*60 - times > 55 && second()+minute()*60 - times < 100) {
     rect(width1/4*3, 0, (ampt*12500), height1);
    rect(width1/4*3, 0, width1/2, (ampt*5000));
    rect(0, height1, width1/2, -(ampt*1667));
      rect(width1/4*3, height1/2, -(ampt*1667), -(ampt*1667));
      rect(width1/4*3, height1/2, (ampt*1667), -(ampt*1667));
      rect(width1/4*3, height1/2, -(ampt*1667), (ampt*900));
      rect(width1/4*3, height1/2, (ampt*1667), (ampt*1667));
    }
    
     if (ampt > .06 && second()+minute()*60 - times> 75 && second()+minute()*60 - times < 100) {
      rect(width1/4*3, 0, (ampt*12500), height1);
      rect(width1/4*3, 0, width1/2, (ampt*5000));
      rect(0, height1, width1/2, -(ampt*1667));
      rect(width1/4*3, height1/2, -(ampt*1667), -(ampt*1667));
      rect(width1/4*3, height1/2, (ampt*1667), -(ampt*1667));
      rect(width1/4*3, height1/2, -(ampt*1667), (ampt*900));
      rect(width1/4*3, height1/2, (ampt*1667), (ampt*1667));
    }
    
    if (ampt > .06 && second()+minute()*60 - times> 75 && second()+minute()*60 - times < 100) {
      rect(0, 0, (ampt*1250), height1/ampt);
      rect(0, height1*3/6, (ampt*1000), height1/ampt);
      for (int x = 0; x < width; x+=20) 
        {
          for (int y = 0; y < height; y+=20)
          {
            stroke(q);
            strokeWeight(0);
            fill(q,q,q,100);
            rect(x,y,largo-1,largo-1);
            q = random((ampt*255)/.1);
          }
        }
    }
    if (ampt > .05 && second()+minute()*60 - times> 100) {
     //fill(240);
     rect(width1/2, 0, (ampt*10000), height1);
     translate(width1/2, height1/2, 0);
      sphere(ampt*2000);
      //fill(255);
       } 
    print(second()+minute()*60 - times);
  //}
}


class Rectangle{
  PVector location,velocity,acceleration; //creating 3 objects
  float G,mass,size;
Rectangle() {
  for(int i = 0; i < 186; i++){
    location = new PVector(2400/(second()+minute()*60), 0);
  }
  }
  
void display(){
    fill(255);
    rect(location.x, location.y,1,400);
  }

void checkEdges(){
    if (location.x < size/2) {
      location.x = size/2;
      velocity.x *= -1;
    } else if (location.x > width/*-size/2*/){
      location.x = width/*-size/2*/;
      velocity.x *= ampt;
    }
    for(int i = 0; i < bands; i++){  
    if (location.y < size/2) {
      location.y = size/2;
      velocity.y *= spectrum[int(random(1,256))];
    } else if (location.y > height/*-size/2*/){
      location.y = height;//-size/2;
      velocity.y *= -ampt;
    }
  }
  }
}
