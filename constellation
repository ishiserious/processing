//work in progress, also mostly pulled from the interwebs with some adjusting

import processing.sound.*;


ArrayList<Circle> circles = new ArrayList<Circle>();
Circle c;

FFT fft;
AudioIn in;
int bands = 256;
float[] spectrum = new float[bands];
float fft_a;

Amplitude amp;
float ampt;

void setup() {
  size(1980, 1020, P3D);
  
  fft = new FFT(this, bands);
  amp = new Amplitude(this);
  in = new AudioIn(this, 0);
  in.start();
  fft.input(in);
  amp.input(in);
}

void draw() {
  background(0);
  ampt = amp.analyze();
  fft.analyze(spectrum);
  for (int i = 0; i < circles.size(); ++i) {//starts at 1 because ++i instead of i++
    for (int k = 0; k < circles.size(); ++k) {//need the k because each i needs all k
      if (i!=k) {
        PVector f = circles.get(k).attract(circles.get(i));
        circles.get(i).applyForce(f);
        circles.get(i).link(circles.get(k)); //circle(i) is the location while circle k is c.location in the link function below
        //add something where circles get deleted after a certain number of draw circles or create a maximum limit where circles get replaced
      }
    }
    circles.get(i).update();
    circles.get(i).display();
    circles.get(i).checkEdges();
  }
  if (ampt >.009) {
     c = new Circle();
     circles.add(c);
  }
}

void mouseClicked(){
  c = new Circle();
  circles.add(c);
}

void mouseDragged(){
  c = new Circle();
  circles.add(c);
}

class Circle{
  PVector location,velocity,acceleration; //creating 3 objects
  float G,mass,size;

  Circle(){
    for(int i = 0; i < bands; i++){
    location = new PVector(random(1,1980), random(1,1080)); //creating the point
    velocity = new PVector(ampt,0); //creates velocity for that point
    acceleration = new PVector(0,spectrum[i]); //takes whatever value of i within 256
    G = 0.6;
    mass = random(ampt,ampt*5);
    size = mass;
    }
  }

  void applyForce(PVector force){ //methods signature; apply force without returning anything
    //PVector f = force.get();
    force.div(mass);
    acceleration.add(force);
  }

  void update(){
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
  }

  void display(){
    noStroke();
    fill(255);
    ellipse(location.x, location.y,size,size);
  }

  void link(Circle c){
    stroke(255, 75);
    PVector dist = PVector.sub(c.location,location); 
    if (dist.mag()<100) {
      line(location.x, location.y, c.location.x, c.location.y);
    }
  }

  PVector attract(Circle c){
    PVector force = PVector.sub(location,c.location);
    float distance = force.mag();
    distance = constrain(distance, 20, 25);
    force.normalize();
    float strength = (G*mass*c.mass)/(distance*distance);
    force.mult(strength);
    return force;
  }

  void checkEdges(){
    if (location.x < size/2) {
      location.x = size/2;
      velocity.x *= -1;
    } else if (location.x > width/*-size/2*/){
      location.x = width/*-size/2*/;
      velocity.x *= ampt;
    }
    for(int i = 0; i < bands; i++){  
    if (location.y < size/2) {
      location.y = size/2;
      velocity.y *= spectrum[i];
    } else if (location.y > height/*-size/2*/){
      location.y = height;//-size/2;
      velocity.y *= -ampt;
    }
  }
  }
}
